Multiplicative inverse is good.

static int MOD = 1e6 + 3;

int fact(int n){
    long long ans = 1;
    while(n)
        ans = (ans * n--) % MOD;
    return ans;
}

int pwr_exp(long long int a, int exp){
    int ans = 1;
    while(exp){
        if(exp & 1)
            ans = (ans * a) % MOD;
        a = (a * a) % MOD;
        exp >>= 1;
    }
    return ans;
}

int Solution::findRank(string A) {
    int N = A.length();
    
    long long int ans = 0;
    for(int i=0; i<N; i++){
        
        //Get all divisors, those who are repeating post current pos(inclusive)
        vector<int> divisors('z' - 'A' + 1, 0);
        for(int j=i; j<N; j++){
            int pos = A[j] - 'A';
            divisors[pos]++;
        }
        
        //Multiply all divisors
        long long divMul = 1;
        for(auto & div: divisors){
            if(div > 1)
                divMul = (divMul * fact(div)) % MOD;
        }
        
        //Calculate divisor inverse A^-1 = A^(MOD-2)
        long long divInv = pwr_exp(divMul, MOD-2) % MOD;
        
        //Find cnt of all elements lesser and towards right
        int smallerEleCnt = 0;
        for(int j=i+1; j<N; j++)
            if(A[i] > A[j])
                smallerEleCnt++;
                
        ans = (ans + (((smallerEleCnt * fact(N-1 - i)) % MOD) * divInv) % MOD ) % MOD;
        
    }
    return ans + 1;
}
